- name: Compute release id
  shell: date +%Y%m%d%H%M%S
  register: deploy_release_id_result

- name: Register release id
  set_fact:
    deploy_release_id: "{{ deploy_release_id_result.stdout }}"

- name: Set path of next realease
  set_fact:
    deploy_next_release_path: "{{ deploy_releases_dir }}/{{ deploy_release_id }}"

- name: Check if current release exists
  stat:
    path: "{{ deploy_current_release_dir }}"
    follow: true
  register: current_release_dir_check

- name: Get real path of the current release
  command: "readlink -f {{ deploy_current_release_dir }}"
  register: current_release_dir_readlink

- name: Set path of current release
  set_fact:
    deploy_current_release_path: "{{ current_release_dir_readlink.stdout }}"
  when: current_release_dir_check.stat.isdir is defined and current_release_dir_check.stat.isdir

## Users
# We use this method instead of {{ ansible_user }} because it will lie if `become` is used
- name: Obtain remote app user
  shell: whoami
  register: deploy_app_user_check
  when: deploy_app_user is not defined

- name: Set remote app user
  set_fact:
    deploy_app_user: "{{ deploy_app_user_check.stdout }}"
  when: deploy_app_user is not defined

- name: Obtain server user
  shell: ps axo user,comm | grep -E '[a]pache|[h]ttpd|[_]www|[w]ww-data|[n]ginx' | grep -v root | head -1 | cut -d ' ' -f 1
  register: deploy_server_user_check
  when: deploy_server_user is not defined

- name: Set server user
  set_fact:
    deploy_server_user: "{{ deploy_server_user_check.stdout }}"
  when: deploy_server_user is not defined

- name: Set app server user
  set_fact:
    deploy_app_server_user: "{{ deploy_server_user }}"
  when: deploy_app_server_user is not defined